function Memory.init 0
push constant 2048
pop static 0
push static 0
push constant 16383
push constant 2048
sub
call Memory.poke 2
pop temp 0
push constant 0
return
function Memory.peek 1
push constant 0
pop local 0
push argument 0
push local 0
add
pop pointer 1
push that 0
return
function Memory.poke 1
push constant 0
pop local 0
push argument 0
push local 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Memory.alloc 4
push static 0
pop local 0
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push local 0
call Memory.peek 1
pop local 3
push local 3
push argument 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
pop local 1
push local 0
push constant 1
add
call Memory.peek 1
pop local 0
goto IF_END0
label IF_FALSE0
push local 0
push argument 0
add
pop local 2
push local 2
push local 3
push argument 0
sub
call Memory.poke 2
pop temp 0
push local 2
push constant 1
add
push local 0
push constant 1
add
call Memory.peek 1
call Memory.poke 2
pop temp 0
push static 0
push local 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
pop static 0
goto IF_END1
label IF_FALSE1
push local 1
push constant 1
add
push local 2
call Memory.poke 2
pop temp 0
label IF_END1
push local 0
return
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push static 0
return
function Memory.deAlloc 3
push static 0
pop local 0
label WHILE_EXP0
push constant 0
not
not
if-goto WHILE_END0
push local 0
push argument 0
lt
push local 1
push argument 0
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 0
sub
push local 1
call Memory.peek 1
add
pop local 2
push local 0
push local 2
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
push local 1
push constant 1
add
call Memory.peek 1
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 0
push constant 1
add
call Memory.peek 1
pop local 0
push local 0
push constant 1
add
call Memory.peek 1
pop local 1
label IF_END0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
