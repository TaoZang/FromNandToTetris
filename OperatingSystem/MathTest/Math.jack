// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static int bitArray;
    /** Initializes the library. */
    function void init() {
        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = 16384 + 16384;
        return;
    }

    function boolean bit(int x, int i) {
        return ((bitArray[i] & x) = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let i = 0;
        let sum = 0;
        let shiftedX = x;
        while (i < 16) {
            if (~(Math.bit(y, i))){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int q, r;
        var boolean abs;
        let abs = false;
        if (x < 0) {
            let x = -x;
            let abs = ~abs;
        }
        if (y < 0) {
            let y = -y;
            let abs = ~abs;
        }
        
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y * 2);
        if ((x - (2 * q * y)) < y) {
            let r = 2 * q;
        } else {
            let r = 2 * q + 1;
        }
        if (abs) {
            let r = -r;
        }
        return r;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int temp;
        let y = 0;
        let j = (16 / 2) - 1;
        while (~(j < 0)) {
            let temp = y + bitArray[j];
            if ((~((temp * temp) > x)) & ((temp * temp) > 0)) {
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            let a = b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            let a = b;
        }
        return a;
    }
}
